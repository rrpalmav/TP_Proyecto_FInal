
Proyecto_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bfc  08002bfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c04  08002c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d660  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002021  00000000  00000000  0002d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024476  00000000  00000000  00031030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107cd  00000000  00000000  000554a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3e3  00000000  00000000  00065c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140056  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036b8  00000000  00000000  001400a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002b90 	.word	0x08002b90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002b90 	.word	0x08002b90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
 800050a:	4b8e      	ldr	r3, [pc, #568]	; (8000744 <MX_GPIO_Init+0x254>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a8d      	ldr	r2, [pc, #564]	; (8000744 <MX_GPIO_Init+0x254>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b8b      	ldr	r3, [pc, #556]	; (8000744 <MX_GPIO_Init+0x254>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
 8000520:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	4b87      	ldr	r3, [pc, #540]	; (8000744 <MX_GPIO_Init+0x254>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a86      	ldr	r2, [pc, #536]	; (8000744 <MX_GPIO_Init+0x254>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b84      	ldr	r3, [pc, #528]	; (8000744 <MX_GPIO_Init+0x254>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	4b80      	ldr	r3, [pc, #512]	; (8000744 <MX_GPIO_Init+0x254>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a7f      	ldr	r2, [pc, #508]	; (8000744 <MX_GPIO_Init+0x254>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b7d      	ldr	r3, [pc, #500]	; (8000744 <MX_GPIO_Init+0x254>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	4b79      	ldr	r3, [pc, #484]	; (8000744 <MX_GPIO_Init+0x254>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a78      	ldr	r2, [pc, #480]	; (8000744 <MX_GPIO_Init+0x254>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b76      	ldr	r3, [pc, #472]	; (8000744 <MX_GPIO_Init+0x254>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	4b72      	ldr	r3, [pc, #456]	; (8000744 <MX_GPIO_Init+0x254>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a71      	ldr	r2, [pc, #452]	; (8000744 <MX_GPIO_Init+0x254>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <MX_GPIO_Init+0x254>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <MX_GPIO_Init+0x254>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a6a      	ldr	r2, [pc, #424]	; (8000744 <MX_GPIO_Init+0x254>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b68      	ldr	r3, [pc, #416]	; (8000744 <MX_GPIO_Init+0x254>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_DHT11_GPIO_Port, GPIO_DHT11_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2101      	movs	r1, #1
 80005b2:	4865      	ldr	r0, [pc, #404]	; (8000748 <MX_GPIO_Init+0x258>)
 80005b4:	f000 ff38 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f244 0181 	movw	r1, #16513	; 0x4081
 80005be:	4863      	ldr	r0, [pc, #396]	; (800074c <MX_GPIO_Init+0x25c>)
 80005c0:	f000 ff32 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	4861      	ldr	r0, [pc, #388]	; (8000750 <MX_GPIO_Init+0x260>)
 80005ca:	f000 ff2d 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4858      	ldr	r0, [pc, #352]	; (8000748 <MX_GPIO_Init+0x258>)
 80005e6:	f000 fd73 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_DHT11_Pin;
 80005ea:	2301      	movs	r3, #1
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_DHT11_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4851      	ldr	r0, [pc, #324]	; (8000748 <MX_GPIO_Init+0x258>)
 8000602:	f000 fd65 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000606:	2332      	movs	r3, #50	; 0x32
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000616:	230b      	movs	r3, #11
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4849      	ldr	r0, [pc, #292]	; (8000748 <MX_GPIO_Init+0x258>)
 8000622:	f000 fd55 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000626:	2386      	movs	r3, #134	; 0x86
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000636:	230b      	movs	r3, #11
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	4844      	ldr	r0, [pc, #272]	; (8000754 <MX_GPIO_Init+0x264>)
 8000642:	f000 fd45 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000646:	f244 0381 	movw	r3, #16513	; 0x4081
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	483b      	ldr	r0, [pc, #236]	; (800074c <MX_GPIO_Init+0x25c>)
 8000660:	f000 fd36 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000676:	230b      	movs	r3, #11
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4832      	ldr	r0, [pc, #200]	; (800074c <MX_GPIO_Init+0x25c>)
 8000682:	f000 fd25 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000698:	2307      	movs	r3, #7
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x268>)
 80006a4:	f000 fd14 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4824      	ldr	r0, [pc, #144]	; (8000750 <MX_GPIO_Init+0x260>)
 80006c0:	f000 fd06 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	481e      	ldr	r0, [pc, #120]	; (8000750 <MX_GPIO_Init+0x260>)
 80006d8:	f000 fcfa 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006ee:	230a      	movs	r3, #10
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4816      	ldr	r0, [pc, #88]	; (8000754 <MX_GPIO_Init+0x264>)
 80006fa:	f000 fce9 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_GPIO_Init+0x264>)
 8000714:	f000 fcdc 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000718:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072a:	230b      	movs	r3, #11
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_GPIO_Init+0x260>)
 8000736:	f000 fccb 	bl	80010d0 <HAL_GPIO_Init>

}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	; 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020400 	.word	0x40020400
 8000750:	40021800 	.word	0x40021800
 8000754:	40020000 	.word	0x40020000
 8000758:	40020c00 	.word	0x40020c00

0800075c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_I2C1_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_I2C1_Init+0x7c>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_I2C1_Init+0x74>)
 800077a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_I2C1_Init+0x74>)
 800079a:	f000 fe5f 	bl	800145c <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f8f8 	bl	8000998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x74>)
 80007ac:	f001 faa1 	bl	8001cf2 <HAL_I2CEx_ConfigAnalogFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f8ef 	bl	8000998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x74>)
 80007be:	f001 fad4 	bl	8001d6a <HAL_I2CEx_ConfigDigitalFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007c8:	f000 f8e6 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800081a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f000 fc4a 	bl	80010d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fab2 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f820 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff fe3a 	bl	80004f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800087c:	f7ff ff6e 	bl	800075c <MX_I2C1_Init>
  MX_TIM6_Init();
 8000880:	f000 f8f4 	bl	8000a6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <main+0x40>)
 8000886:	f001 ffd3 	bl	8002830 <HAL_TIM_Base_Start>
  lcd_16x02_send_string ("RICARDO ROBERTO PALMA VENTURA");

  HAL_Delay(1000);
  */

  lcd_16x02_init ();
 800088a:	f000 f971 	bl	8000b70 <lcd_16x02_init>
  //dht11_init(GPIOA, GPIO_PIN_1);
  HAL_Delay(3000);
 800088e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000892:	f000 fb13 	bl	8000ebc <HAL_Delay>
  lcd_16x02_gotoxy(1, 1);
 8000896:	2101      	movs	r1, #1
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fa21 	bl	8000ce0 <lcd_16x02_gotoxy>
  lcd_16x02_send_string ("TEMP:- 24.0C");
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <main+0x44>)
 80008a0:	f000 fa58 	bl	8000d54 <lcd_16x02_send_string>
  lcd_16x02_send_string ("   HUM:- 30%");
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <main+0x48>)
 80008a6:	f000 fa55 	bl	8000d54 <lcd_16x02_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <main+0x3e>
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	08002bc4 	.word	0x08002bc4
 80008b4:	08002bd4 	.word	0x08002bd4

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f95a 	bl	8002b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <SystemClock_Config+0xd8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <SystemClock_Config+0xd8>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <SystemClock_Config+0xd8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SystemClock_Config+0xdc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a24      	ldr	r2, [pc, #144]	; (8000994 <SystemClock_Config+0xdc>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <SystemClock_Config+0xdc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800092c:	23b4      	movs	r3, #180	; 0xb4
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f001 faa3 	bl	8001e88 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000948:	f000 f826 	bl	8000998 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800094c:	f001 fa4c 	bl	8001de8 <HAL_PWREx_EnableOverDrive>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000956:	f000 f81f 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000966:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2105      	movs	r1, #5
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fcfd 	bl	8002378 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000984:	f000 f808 	bl	8000998 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	; 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 fa1c 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a7c:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_TIM6_Init+0x68>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a82:	2231      	movs	r2, #49	; 0x31
 8000a84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a9c:	f001 fe78 	bl	8002790 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f7ff ff77 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000ab8:	f001 ffc2 	bl	8002a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ac2:	f7ff ff69 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000007c 	.word	0x2000007c
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10d      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x40>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <HAL_TIM_Base_MspInit+0x40>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_TIM_Base_MspInit+0x40>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40001000 	.word	0x40001000
 8000b18:	40023800 	.word	0x40023800

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ff7f 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f001 fff5 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fe8d 	bl	800086c <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08002c0c 	.word	0x08002c0c
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	200000cc 	.word	0x200000cc

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <lcd_16x02_init>:
uint8_t current_row_lcd_16x02;
uint8_t current_column_lcd_16x02;


void lcd_16x02_init (void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	// 4 bits para inicializacion
	state_lcd_16x02 = INIT_LCD_16x02;
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <lcd_16x02_init+0xa4>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);  				// realizar espera de 40ms
 8000b7a:	2032      	movs	r0, #50	; 0x32
 8000b7c:	f000 f99e 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x30);
 8000b80:	2030      	movs	r0, #48	; 0x30
 8000b82:	f000 f84d 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(5);   				// realizar espera de 4.1ms
 8000b86:	2005      	movs	r0, #5
 8000b88:	f000 f998 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x30);
 8000b8c:	2030      	movs	r0, #48	; 0x30
 8000b8e:	f000 f847 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(1);  					// realizar espera de 1ms
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 f992 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x30);
 8000b98:	2030      	movs	r0, #48	; 0x30
 8000b9a:	f000 f841 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f000 f98c 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x20);  	// realiza el envio de modo 4bit
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	f000 f83b 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(10);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f000 f986 	bl	8000ebc <HAL_Delay>

  // dislay initialisation
	lcd_16x02_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 f835 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 f980 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bbc:	2008      	movs	r0, #8
 8000bbe:	f000 f82f 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 f97a 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x01);  // clear display
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f829 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 f974 	bl	8000ebc <HAL_Delay>
	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f971 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f000 f820 	bl	8000c20 <lcd_16x02_send_cmd>
	HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 f96b 	bl	8000ebc <HAL_Delay>
	lcd_16x02_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000be6:	200c      	movs	r0, #12
 8000be8:	f000 f81a 	bl	8000c20 <lcd_16x02_send_cmd>
	current_row_lcd_16x02 = 1;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <lcd_16x02_init+0xa8>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
	current_column_lcd_16x02 = 1;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <lcd_16x02_init+0xac>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
	lcd_16x02_gotoxy(current_row_lcd_16x02, current_column_lcd_16x02);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <lcd_16x02_init+0xa8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <lcd_16x02_init+0xac>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4619      	mov	r1, r3
 8000c04:	4610      	mov	r0, r2
 8000c06:	f000 f86b 	bl	8000ce0 <lcd_16x02_gotoxy>
	state_lcd_16x02 = READY_LCD_16x02;
 8000c0a:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <lcd_16x02_init+0xa4>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	701a      	strb	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000c4 	.word	0x200000c4
 8000c18:	200000c5 	.word	0x200000c5
 8000c1c:	200000c6 	.word	0x200000c6

08000c20 <lcd_16x02_send_cmd>:



void lcd_16x02_send_cmd (char cmd)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f023 030f 	bic.w	r3, r3, #15
 8000c30:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f043 030c 	orr.w	r3, r3, #12
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	f043 030c 	orr.w	r3, r3, #12
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c60:	f107 0208 	add.w	r2, r7, #8
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2304      	movs	r3, #4
 8000c6a:	214e      	movs	r1, #78	; 0x4e
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <lcd_16x02_send_cmd+0x5c>)
 8000c6e:	f000 fd39 	bl	80016e4 <HAL_I2C_Master_Transmit>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000028 	.word	0x20000028

08000c80 <lcd_16x02_send_data>:

void lcd_16x02_send_data (char data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f023 030f 	bic.w	r3, r3, #15
 8000c90:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	f043 030d 	orr.w	r3, r3, #13
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f043 0309 	orr.w	r3, r3, #9
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	f043 030d 	orr.w	r3, r3, #13
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	f043 0309 	orr.w	r3, r3, #9
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 1000);
 8000cc0:	f107 0208 	add.w	r2, r7, #8
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2304      	movs	r3, #4
 8000ccc:	214e      	movs	r1, #78	; 0x4e
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <lcd_16x02_send_data+0x5c>)
 8000cd0:	f000 fd08 	bl	80016e4 <HAL_I2C_Master_Transmit>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000028 	.word	0x20000028

08000ce0 <lcd_16x02_gotoxy>:
		lcd_16x02_send_data(' ');
	}
}

void lcd_16x02_gotoxy(int y, int x)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	if(x < 1 && x > 16) {
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dc07      	bgt.n	8000d00 <lcd_16x02_gotoxy+0x20>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	dd04      	ble.n	8000d00 <lcd_16x02_gotoxy+0x20>
		state_lcd_16x02 = ERROR_LCD_16x02;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <lcd_16x02_gotoxy+0x70>)
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	701a      	strb	r2, [r3, #0]
		x = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	603b      	str	r3, [r7, #0]
	}
	if(y < 1 && y > 2) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc07      	bgt.n	8000d16 <lcd_16x02_gotoxy+0x36>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	dd04      	ble.n	8000d16 <lcd_16x02_gotoxy+0x36>
		state_lcd_16x02 = ERROR_LCD_16x02;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <lcd_16x02_gotoxy+0x70>)
 8000d0e:	2205      	movs	r2, #5
 8000d10:	701a      	strb	r2, [r3, #0]
		y = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
	}
	x = x - 1;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
    switch (y)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d003      	beq.n	8000d2a <lcd_16x02_gotoxy+0x4a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d005      	beq.n	8000d34 <lcd_16x02_gotoxy+0x54>
 8000d28:	e009      	b.n	8000d3e <lcd_16x02_gotoxy+0x5e>
    {
        case 1:
            x |= 0x80;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	603b      	str	r3, [r7, #0]
            break;
 8000d32:	e004      	b.n	8000d3e <lcd_16x02_gotoxy+0x5e>
        case 2:
            x |= 0xC0;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d3a:	603b      	str	r3, [r7, #0]
            break;
 8000d3c:	bf00      	nop
    }
    lcd_16x02_send_cmd (x);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff6c 	bl	8000c20 <lcd_16x02_send_cmd>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000c4 	.word	0x200000c4

08000d54 <lcd_16x02_send_string>:
	stlen()
}
*/

void lcd_16x02_send_string (char *str)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	while (*str){
 8000d5c:	e02c      	b.n	8000db8 <lcd_16x02_send_string+0x64>
		if(++current_column_lcd_16x02 > MAX_SIZE_LCD_16X02_I2C_COLUMN){
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <lcd_16x02_send_string+0x78>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <lcd_16x02_send_string+0x78>)
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <lcd_16x02_send_string+0x78>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	d91b      	bls.n	8000daa <lcd_16x02_send_string+0x56>
			state_lcd_16x02 = ERROR_LCD_16x02;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <lcd_16x02_send_string+0x7c>)
 8000d74:	2205      	movs	r2, #5
 8000d76:	701a      	strb	r2, [r3, #0]
			current_column_lcd_16x02 = 1;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <lcd_16x02_send_string+0x78>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
			if(++current_row_lcd_16x02> MAX_SIZE_LCD_16X02_I2C_ROW){
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <lcd_16x02_send_string+0x80>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <lcd_16x02_send_string+0x80>)
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <lcd_16x02_send_string+0x80>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d902      	bls.n	8000d98 <lcd_16x02_send_string+0x44>
				current_row_lcd_16x02 = 1;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <lcd_16x02_send_string+0x80>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
			}
			lcd_16x02_gotoxy(current_row_lcd_16x02, current_column_lcd_16x02);
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <lcd_16x02_send_string+0x80>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <lcd_16x02_send_string+0x78>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4610      	mov	r0, r2
 8000da6:	f7ff ff9b 	bl	8000ce0 <lcd_16x02_gotoxy>
		}
		lcd_16x02_send_data (*str++);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff64 	bl	8000c80 <lcd_16x02_send_data>
	while (*str){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ce      	bne.n	8000d5e <lcd_16x02_send_string+0xa>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000c6 	.word	0x200000c6
 8000dd0:	200000c4 	.word	0x200000c4
 8000dd4:	200000c5 	.word	0x200000c5

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f931 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdca 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f93b 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e58:	f000 f911 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200000c8 	.word	0x200000c8

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200000c8 	.word	0x200000c8

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff47 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5c 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e177      	b.n	80013dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8166 	bne.w	80013d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80c0 	beq.w	80013d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_GPIO_Init+0x324>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a61      	ldr	r2, [pc, #388]	; (80013f8 <HAL_GPIO_Init+0x328>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_GPIO_Init+0x32c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d037      	beq.n	800130e <HAL_GPIO_Init+0x23e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a57      	ldr	r2, [pc, #348]	; (8001400 <HAL_GPIO_Init+0x330>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d031      	beq.n	800130a <HAL_GPIO_Init+0x23a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x334>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x236>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_GPIO_Init+0x338>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x232>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a54      	ldr	r2, [pc, #336]	; (800140c <HAL_GPIO_Init+0x33c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x22e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a53      	ldr	r2, [pc, #332]	; (8001410 <HAL_GPIO_Init+0x340>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x22a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x344>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x348>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x34c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x350>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x21a>
 80012e6:	2309      	movs	r3, #9
 80012e8:	e012      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012ea:	230a      	movs	r3, #10
 80012ec:	e010      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012ee:	2308      	movs	r3, #8
 80012f0:	e00e      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x240>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x240>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x240>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x240>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x240>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x328>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_GPIO_Init+0x354>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a34      	ldr	r2, [pc, #208]	; (8001424 <HAL_GPIO_Init+0x354>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <HAL_GPIO_Init+0x354>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a29      	ldr	r2, [pc, #164]	; (8001424 <HAL_GPIO_Init+0x354>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_GPIO_Init+0x354>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_GPIO_Init+0x354>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_GPIO_Init+0x354>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_GPIO_Init+0x354>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae84 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40022000 	.word	0x40022000
 8001420:	40022400 	.word	0x40022400
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e12b      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff f9aa 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2224      	movs	r2, #36	; 0x24
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c0:	f001 f952 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 80014c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a81      	ldr	r2, [pc, #516]	; (80016d0 <HAL_I2C_Init+0x274>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d807      	bhi.n	80014e0 <HAL_I2C_Init+0x84>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a80      	ldr	r2, [pc, #512]	; (80016d4 <HAL_I2C_Init+0x278>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf94      	ite	ls
 80014d8:	2301      	movls	r3, #1
 80014da:	2300      	movhi	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	e006      	b.n	80014ee <HAL_I2C_Init+0x92>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a7d      	ldr	r2, [pc, #500]	; (80016d8 <HAL_I2C_Init+0x27c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	bf94      	ite	ls
 80014e8:	2301      	movls	r3, #1
 80014ea:	2300      	movhi	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0e7      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a78      	ldr	r2, [pc, #480]	; (80016dc <HAL_I2C_Init+0x280>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_I2C_Init+0x274>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d802      	bhi.n	8001530 <HAL_I2C_Init+0xd4>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	e009      	b.n	8001544 <HAL_I2C_Init+0xe8>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <HAL_I2C_Init+0x284>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	3301      	adds	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	495c      	ldr	r1, [pc, #368]	; (80016d0 <HAL_I2C_Init+0x274>)
 8001560:	428b      	cmp	r3, r1
 8001562:	d819      	bhi.n	8001598 <HAL_I2C_Init+0x13c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e59      	subs	r1, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001572:	1c59      	adds	r1, r3, #1
 8001574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001578:	400b      	ands	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <HAL_I2C_Init+0x138>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e59      	subs	r1, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fbb1 f3f3 	udiv	r3, r1, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	e051      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001594:	2304      	movs	r3, #4
 8001596:	e04f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d111      	bne.n	80015c4 <HAL_I2C_Init+0x168>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e012      	b.n	80015ea <HAL_I2C_Init+0x18e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	0099      	lsls	r1, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x196>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e022      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10e      	bne.n	8001618 <HAL_I2C_Init+0x1bc>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e58      	subs	r0, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6859      	ldr	r1, [r3, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	fbb0 f3f3 	udiv	r3, r0, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001616:	e00f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	0099      	lsls	r1, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	6809      	ldr	r1, [r1, #0]
 800163c:	4313      	orrs	r3, r2
 800163e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6911      	ldr	r1, [r2, #16]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	4311      	orrs	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	000186a0 	.word	0x000186a0
 80016d4:	001e847f 	.word	0x001e847f
 80016d8:	003d08ff 	.word	0x003d08ff
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	817b      	strh	r3, [r7, #10]
 80016f4:	4613      	mov	r3, r2
 80016f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff fbd4 	bl	8000ea4 <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	f040 80e0 	bne.w	80018cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2319      	movs	r3, #25
 8001712:	2201      	movs	r2, #1
 8001714:	4970      	ldr	r1, [pc, #448]	; (80018d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f964 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001722:	2302      	movs	r3, #2
 8001724:	e0d3      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_I2C_Master_Transmit+0x50>
 8001730:	2302      	movs	r3, #2
 8001732:	e0cc      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d007      	beq.n	800175a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2221      	movs	r2, #33	; 0x21
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2210      	movs	r2, #16
 8001776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	893a      	ldrh	r2, [r7, #8]
 800178a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <HAL_I2C_Master_Transmit+0x1f8>)
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800179c:	8979      	ldrh	r1, [r7, #10]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f89c 	bl	80018e0 <I2C_MasterRequestWrite>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e08d      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017c8:	e066      	b.n	8001898 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f9de 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00d      	beq.n	80017f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d107      	bne.n	80017f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06b      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b04      	cmp	r3, #4
 8001832:	d11b      	bne.n	800186c <HAL_I2C_Master_Transmit+0x188>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d017      	beq.n	800186c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	6a39      	ldr	r1, [r7, #32]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f9ce 	bl	8001c12 <I2C_WaitOnBTFFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00d      	beq.n	8001898 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2b04      	cmp	r3, #4
 8001882:	d107      	bne.n	8001894 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001892:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e01a      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d194      	bne.n	80017ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e000      	b.n	80018ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
  }
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	00100002 	.word	0x00100002
 80018dc:	ffff0000 	.word	0xffff0000

080018e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d006      	beq.n	800190a <I2C_MasterRequestWrite+0x2a>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <I2C_MasterRequestWrite+0x2a>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001908:	d108      	bne.n	800191c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	2b12      	cmp	r3, #18
 8001922:	d107      	bne.n	8001934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f84f 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195a:	d103      	bne.n	8001964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e035      	b.n	80019d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001970:	d108      	bne.n	8001984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	e01b      	b.n	80019bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	11db      	asrs	r3, r3, #7
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f003 0306 	and.w	r3, r3, #6
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f063 030f 	orn	r3, r3, #15
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <I2C_MasterRequestWrite+0xfc>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f875 	bl	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e010      	b.n	80019d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <I2C_MasterRequestWrite+0x100>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f865 	bl	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	00010008 	.word	0x00010008
 80019e0:	00010002 	.word	0x00010002

080019e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f4:	e025      	b.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019fc:	d021      	beq.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fe:	f7ff fa51 	bl	8000ea4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f043 0220 	orr.w	r2, r3, #32
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e023      	b.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10d      	bne.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4013      	ands	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	e00c      	b.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d0b6      	beq.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aa0:	e051      	b.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab0:	d123      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f043 0204 	orr.w	r2, r3, #4
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e046      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d021      	beq.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7ff f9cf 	bl	8000ea4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d116      	bne.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e020      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10c      	bne.n	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e00b      	b.n	8001b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d18d      	bne.n	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b9c:	e02d      	b.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f878 	bl	8001c94 <I2C_IsAcknowledgeFailed>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02d      	b.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d021      	beq.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff f975 	bl	8000ea4 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e007      	b.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d1ca      	bne.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c1e:	e02d      	b.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f837 	bl	8001c94 <I2C_IsAcknowledgeFailed>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e02d      	b.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c36:	d021      	beq.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7ff f934 	bl	8000ea4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d1ca      	bne.n	8001c20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d11b      	bne.n	8001ce4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d129      	bne.n	8001d5c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	; 0x24
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0210 	bic.w	r2, r2, #16
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d12a      	bne.n	8001dda <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	f023 030f 	bic.w	r3, r3, #15
 8001daa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
  }
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_PWREx_EnableOverDrive+0x94>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e14:	f7ff f846 	bl	8000ea4 <HAL_GetTick>
 8001e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e1a:	e009      	b.n	8001e30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e1c:	f7ff f842 	bl	8000ea4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2a:	d901      	bls.n	8001e30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e01f      	b.n	8001e70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e44:	f7ff f82e 	bl	8000ea4 <HAL_GetTick>
 8001e48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e4a:	e009      	b.n	8001e60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e4c:	f7ff f82a 	bl	8000ea4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e5a:	d901      	bls.n	8001e60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e007      	b.n	8001e70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	420e0040 	.word	0x420e0040
 8001e80:	40007000 	.word	0x40007000
 8001e84:	420e0044 	.word	0x420e0044

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e267      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d112      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e242      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6c      	ldr	r2, [pc, #432]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe ffb0 	bl	8000ea4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7fe ffac 	bl	8000ea4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e207      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff9c 	bl	8000ea4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe ff98 	bl	8000ea4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1f3      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c7      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ff51 	bl	8000ea4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe ff4d 	bl	8000ea4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1a8      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe ff30 	bl	8000ea4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7fe ff2c 	bl	8000ea4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e187      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d036      	beq.n	80020e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_RCC_OscConfig+0x248>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe ff10 	bl	8000ea4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe ff0c 	bl	8000ea4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e167      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x248>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fef9 	bl	8000ea4 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e00e      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b6:	f7fe fef5 	bl	8000ea4 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d907      	bls.n	80020d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e150      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470000 	.word	0x42470000
 80020d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ea      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8097 	beq.w	800221c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b7d      	ldr	r3, [pc, #500]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a7c      	ldr	r2, [pc, #496]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b77      	ldr	r3, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b74      	ldr	r3, [pc, #464]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a73      	ldr	r2, [pc, #460]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe feb5 	bl	8000ea4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe feb1 	bl	8000ea4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e10c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ea>
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x30c>
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a57      	ldr	r2, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fe76 	bl	8000ea4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe72 	bl	8000ea4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0cb      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fe60 	bl	8000ea4 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe5c 	bl	8000ea4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b5      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a1 	beq.w	8002368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d05c      	beq.n	80022ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d141      	bne.n	80022be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fe30 	bl	8000ea4 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fe2c 	bl	8000ea4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e087      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	491b      	ldr	r1, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fe05 	bl	8000ea4 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fe01 	bl	8000ea4 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e05c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x416>
 80022bc:	e054      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fdee 	bl	8000ea4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fdea 	bl	8000ea4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e045      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e038      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d028      	beq.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d121      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d11a      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800233a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cc      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b68      	ldr	r3, [pc, #416]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90c      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d044      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e067      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4934      	ldr	r1, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7fe fd1c 	bl	8000ea4 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fd18 	bl	8000ea4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fc7c 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00
 8002534:	40023800 	.word	0x40023800
 8002538:	08002be4 	.word	0x08002be4
 800253c:	20000000 	.word	0x20000000
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b094      	sub	sp, #80	; 0x50
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
 8002550:	2300      	movs	r3, #0
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002554:	2300      	movs	r3, #0
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4b79      	ldr	r3, [pc, #484]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 8002568:	2b08      	cmp	r3, #8
 800256a:	f200 80e1 	bhi.w	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	e0db      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b73      	ldr	r3, [pc, #460]	; (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800257c:	e0db      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_GetSysClockFreq+0x208>)
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002582:	e0d8      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002584:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258e:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	2200      	movs	r2, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6139      	str	r1, [r7, #16]
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e8:	4659      	mov	r1, fp
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4651      	mov	r1, sl
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4651      	mov	r1, sl
 80025f8:	ebb2 0801 	subs.w	r8, r2, r1
 80025fc:	4659      	mov	r1, fp
 80025fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	462b      	mov	r3, r5
 8002624:	eb49 0303 	adc.w	r3, r9, r3
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002636:	4629      	mov	r1, r5
 8002638:	024b      	lsls	r3, r1, #9
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002640:	4621      	mov	r1, r4
 8002642:	024a      	lsls	r2, r1, #9
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264a:	2200      	movs	r2, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002654:	f7fd fdca 	bl	80001ec <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002660:	e058      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	4611      	mov	r1, r2
 800266e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	0159      	lsls	r1, r3, #5
 800268a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268e:	0150      	lsls	r0, r2, #5
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4641      	mov	r1, r8
 8002696:	ebb2 0a01 	subs.w	sl, r2, r1
 800269a:	4649      	mov	r1, r9
 800269c:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b4:	ebb2 040a 	subs.w	r4, r2, sl
 80026b8:	eb63 050b 	sbc.w	r5, r3, fp
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	00eb      	lsls	r3, r5, #3
 80026c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ca:	00e2      	lsls	r2, r4, #3
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	18e3      	adds	r3, r4, r3
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	464b      	mov	r3, r9
 80026d8:	eb45 0303 	adc.w	r3, r5, r3
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ea:	4629      	mov	r1, r5
 80026ec:	028b      	lsls	r3, r1, #10
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f4:	4621      	mov	r1, r4
 80026f6:	028a      	lsls	r2, r1, #10
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	61fa      	str	r2, [r7, #28]
 8002704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002708:	f7fd fd70 	bl	80001ec <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_GetSysClockFreq+0x200>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272e:	e002      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetSysClockFreq+0x204>)
 8002732:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002738:	4618      	mov	r0, r3
 800273a:	3750      	adds	r7, #80	; 0x50
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800276c:	f7ff fff0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	08002bf4 	.word	0x08002bf4

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f98e 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 f896 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d001      	beq.n	8002848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e046      	b.n	80028d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_TIM_Base_Start+0xb4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d01d      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_TIM_Base_Start+0xb8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_TIM_Base_Start+0xbc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_TIM_Base_Start+0xc0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_TIM_Base_Start+0xc4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <HAL_TIM_Base_Start+0xc8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start+0x70>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_TIM_Base_Start+0xcc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d010      	beq.n	80028d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	e007      	b.n	80028d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40010400 	.word	0x40010400
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40001800 	.word	0x40001800

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a40      	ldr	r2, [pc, #256]	; (8002a14 <TIM_Base_SetConfig+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d00f      	beq.n	8002940 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <TIM_Base_SetConfig+0x118>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00b      	beq.n	8002940 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <TIM_Base_SetConfig+0x11c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <TIM_Base_SetConfig+0x120>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <TIM_Base_SetConfig+0x124>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d108      	bne.n	8002952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <TIM_Base_SetConfig+0x114>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d027      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <TIM_Base_SetConfig+0x118>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d023      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <TIM_Base_SetConfig+0x11c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <TIM_Base_SetConfig+0x120>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01b      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <TIM_Base_SetConfig+0x124>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d017      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <TIM_Base_SetConfig+0x128>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <TIM_Base_SetConfig+0x12c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00f      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <TIM_Base_SetConfig+0x130>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00b      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <TIM_Base_SetConfig+0x134>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <TIM_Base_SetConfig+0x138>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <TIM_Base_SetConfig+0x13c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <TIM_Base_SetConfig+0x114>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_Base_SetConfig+0xf8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <TIM_Base_SetConfig+0x124>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d103      	bne.n	8002a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	615a      	str	r2, [r3, #20]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40010400 	.word	0x40010400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800
 8002a34:	40001800 	.word	0x40001800
 8002a38:	40001c00 	.word	0x40001c00
 8002a3c:	40002000 	.word	0x40002000

08002a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e05a      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40010400 	.word	0x40010400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40001800 	.word	0x40001800

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4d0d      	ldr	r5, [pc, #52]	; (8002b70 <__libc_init_array+0x38>)
 8002b3c:	4c0d      	ldr	r4, [pc, #52]	; (8002b74 <__libc_init_array+0x3c>)
 8002b3e:	1b64      	subs	r4, r4, r5
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	2600      	movs	r6, #0
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	4d0b      	ldr	r5, [pc, #44]	; (8002b78 <__libc_init_array+0x40>)
 8002b4a:	4c0c      	ldr	r4, [pc, #48]	; (8002b7c <__libc_init_array+0x44>)
 8002b4c:	f000 f820 	bl	8002b90 <_init>
 8002b50:	1b64      	subs	r4, r4, r5
 8002b52:	10a4      	asrs	r4, r4, #2
 8002b54:	2600      	movs	r6, #0
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08002c04 	.word	0x08002c04
 8002b74:	08002c04 	.word	0x08002c04
 8002b78:	08002c04 	.word	0x08002c04
 8002b7c:	08002c08 	.word	0x08002c08

08002b80 <memset>:
 8002b80:	4402      	add	r2, r0
 8002b82:	4603      	mov	r3, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <_init>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

08002b9c <_fini>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr
